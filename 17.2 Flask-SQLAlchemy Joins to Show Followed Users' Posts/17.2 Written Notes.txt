-> revisiting relationships in the database lesson  
    -> introduction to using sqlalchemy joins to show followed users' posts  
    -> lesson demonstrates querying the database for efficient data retrieval  
    -> builds on an ongoing python + flask project from the course  

-> querying for followed compositions  
    -> current index page shows all compositions but can be modified  
    -> goal is to filter compositions by users one follows  
    -> inefficient method: n+1 problem of multiple queries for growing databases  
    -> solution: use sqlalchemy joins to optimise the query process  

-> using sqlalchemy joins  
    -> joins combine rows from multiple tables satisfying a condition  
    -> temporary tables are created for combined data rows  
    -> example:  
        -> tables: users, compositions, and follows  
        -> join users table with compositions table via follows table to fetch specific data  
        -> demonstrates retrieval of compositions by users followed by a particular user  

-> flask-sqlalchemy join example  
    -> shows query for fetching followed compositions:  
        -> select data from follow table, filter by follower id, join with compositions table  
        -> result: compositions by followed users  
    -> alternate query order (join first, filter later) yields same result due to database optimisation  

-> viewing choices  
    -> adds flexibility to display either all compositions or followed compositions  
    -> uses cookies to store user preference for showing compositions  
    -> cookies are set via view functions and remembered for 30 days  
    -> example view function:  
        -> `show_followed`: filters compositions by followed users  
        -> `show_all`: displays all compositions  
    -> pagination ensures large datasets are displayed efficiently  

-> setting cookies  
    -> cookies created using flask's `make_response()` function  
    -> expiry of cookies set to 30 days via `max_age` parameter  
    -> cookie stores whether to show followed compositions or all compositions  

-> add tabs to home page  
    -> incorporates navigation tabs in the index template  
    -> tabs allow switching between all compositions and followed compositions  
    -> css customisation provided for styling tabs  
    -> suggests registering users as their own followers to show their own compositions  
    -> static method added to ensure existing users are self-following  

-> handling follower and following counts  
    -> counts adjusted to exclude self-following  
    -> template updates ensure counts reflect real follower/following numbers  

-> summary  
    -> recognised and resolved the n+1 problem with efficient database joins  
    -> learned sqlalchemy join queries for combining and filtering related table data  
    -> incorporated properties in models to manage complex queries  
    -> used cookies to toggle user views dynamically  